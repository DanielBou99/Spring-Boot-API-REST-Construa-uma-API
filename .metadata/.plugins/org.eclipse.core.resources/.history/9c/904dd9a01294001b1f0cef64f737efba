package br.com.alura.forum.controller;

import java.net.URI;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.alura.forum.controller.dto.DetalhesDoTopicoDto;
import br.com.alura.forum.controller.dto.TopicoDto;
import br.com.alura.forum.controller.form.TopicoForm;
import br.com.alura.forum.modelo.Topico;
import br.com.alura.forum.repository.CursoRepository;
import br.com.alura.forum.repository.TopicoRepository;

@RestController /* Notação indica que a classe é um controller e que todos os metodos tem @RequestBody */
@RequestMapping("/topicos")
public class TopicosController {
	
	
	@Autowired
	private TopicoRepository topicoRepository;
	
	@Autowired
	private CursoRepository cursoRepository;
	
	/*Carregar todos os topicos e devolve-los*/
	@GetMapping /* --> Notação indica que esse metodo é chamado quando a requisição é GET*/
	public List<TopicoDto> lista(String nomeCurso) {
		
		if (nomeCurso == null) {
			List<Topico> topicos = topicoRepository.findAll();
			return TopicoDto.converter(topicos);
		} else {
			List<Topico> topicos = topicoRepository.findByCursoNome(nomeCurso);
			return TopicoDto.converter(topicos);
		}
	}
	
	/* @Valid é para avisar pro Spring que ele precisa rodar as validações do BeanValidation que estão dentro do TopicoForm*/
	/* @RequestBody é para avisar pro Spring que os dados desse parâmetro serão recebidos na requisição */
	@PostMapping /* --> Notação indica que esse metodo é chamado quando a requisição é POST*/
	public ResponseEntity<TopicoDto> cadastrar(@RequestBody @Valid TopicoForm form, UriComponentsBuilder uriBuilder) {
		
		Topico topico = form.converter(cursoRepository);
		topicoRepository.save(topico);
		
		URI uri = uriBuilder.path("/topicos/{id}").buildAndExpand(topico.getId()).toUri();
		return ResponseEntity.created(uri).body(new TopicoDto(topico));
	}
	
	/* @PathVariable indica que o valor da variável será recebida como parte do link e não como ''parametro'' do link */
	@GetMapping("/{id}")
	public DetalhesDoTopicoDto detalhar (@PathVariable Long id) {
		
		Topico topico = topicoRepository.getOne(id);
		
		return new TopicoDto(topico);
	}

}